import { Injectable, OnModuleInit, Logger, Inject, forwardRef } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Keypair } from '@solana/web3.js';
import bs58 from 'bs58';
import { ethers } from 'ethers';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ListWallet } from '../telegram-wallets/entities/list-wallet.entity';
import { UserWalletCode } from 'src/telegram-wallets/entities/user-wallet-code.entity';
import { randomBytes } from 'crypto';
import { TelegramWalletsService } from '../telegram-wallets/telegram-wallets.service';
import { SolanaService } from '../solana/solana.service';
import { createHash } from 'crypto';
import { UserWallet } from 'src/telegram-wallets/entities/user-wallet.entity';
import { WalletAuth } from 'src/telegram-wallets/entities/wallet-auth.entity';
import { WalletReferent } from '../referral/entities/wallet-referent.entity';
import { BgRefService } from '../referral/bg-ref.service';
import axios from 'axios';

@Injectable()
export class TelegramBotService implements OnModuleInit {
    private botToken: string;
    private frontendUrl: string;
    private workerUrl: string;
    private readonly logger = new Logger(TelegramBotService.name);
    private lastUpdateId: number = 0;
    private isPolling: boolean = false;

    constructor(
        private configService: ConfigService,
        @InjectRepository(ListWallet)
        private listWalletRepository: Repository<ListWallet>,
        @InjectRepository(UserWallet)
        private userWalletRepository: Repository<UserWallet>,
        @InjectRepository(WalletAuth)
        private walletAuthRepository: Repository<WalletAuth>,
        @InjectRepository(UserWalletCode)
        private userWalletCodeRepository: Repository<UserWalletCode>,
        @InjectRepository(WalletReferent)
        private walletReferentRepository: Repository<WalletReferent>,
        @Inject(forwardRef(() => TelegramWalletsService))
        private readonly telegramWalletsService: TelegramWalletsService,
        private readonly solanaService: SolanaService,
        private readonly bgRefService: BgRefService,
    ) {
        this.botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN', '');
        this.frontendUrl = this.configService.get<string>('URL_FRONTEND', '');
        this.workerUrl = this.configService.get<string>('URL_WORKER', 'https://proxy.michosso2025.workers.dev');

        if (!this.botToken) {
            throw new Error('TELEGRAM_BOT_TOKEN is missing in .env file');
        }

        if (!this.frontendUrl) {
            throw new Error('URL_FRONTEND is missing in .env file');
        }
    }

    private async sendMessage(chatId: number, text: string, options?: any): Promise<any> {
        try {
            const url = `${this.workerUrl}/bot${this.botToken}/sendMessage`;
            const response = await axios.post(url, {
                chat_id: chatId,
                text: text,
                ...options
            });
            return response.data;
        } catch (error) {
            this.logger.error(`Error sending message: ${error.message}`);
            throw error;
        }
    }

    private async getUpdates(): Promise<any[]> {
        try {
            const url = `${this.workerUrl}/bot${this.botToken}/getUpdates`;
            const response = await axios.get(url, {
                params: {
                    offset: this.lastUpdateId + 1,
                    timeout: 30
                }
            });
            return response.data.result || [];
        } catch (error) {
            this.logger.error(`Error getting updates: ${error.message}`);
            return [];
        }
    }

    private async handleUpdate(update: any): Promise<void> {
        if (!update.message) return;

        const message = update.message;
        const chatId = message.chat.id;
        const text = message.text;
        const telegramId = message.from?.id?.toString();

        if (!telegramId) {
            await this.sendMessage(chatId, '‚ùå L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh Telegram ID.');
            return;
        }

        if (text?.startsWith('/start')) {
            try {
                let refCode: string | undefined = undefined;
                const match = text.match(/\/start(?:[\s_](.+))?/);
                
                if (match && match[1]) {
                    const param = match[1].trim();
                    
                    if (param.startsWith('ref=')) {
                        refCode = param.substring(4);
                    } else if (param.includes('ref=')) {
                        const refIndex = param.indexOf('ref=');
                        if (refIndex !== -1) {
                            const afterRef = param.substring(refIndex + 4);
                            const spaceIndex = afterRef.indexOf(' ');
                            refCode = spaceIndex !== -1 ? afterRef.substring(0, spaceIndex) : afterRef;
                        }
                    } else {
                        refCode = param;
                    }
                }

                this.logger.log(`Processing /start command for ${telegramId} with refCode: ${refCode || 'none'}`);
                
                const existingUser = await this.userWalletRepository.findOne({ 
                    where: { uw_telegram_id: telegramId } 
                });
                
                const isNewUser = !existingUser;
                const wallets = await this.getOrCreateWallet(telegramId, refCode);
                
                let solBalance = 0;
                try {
                    solBalance = await this.solanaService.getBalance(wallets.solana);
                } catch (balanceError) {
                    this.logger.error(`Error getting Solana balance: ${balanceError.message}`);
                }

                let referralMessage = '';
                if (refCode && isNewUser) {
                    if (wallets.referralSuccess) {
                        referralMessage = `\n\nüéÅ *Th√†nh c√¥ng*: B·∫°n ƒë√£ s·ª≠ d·ª•ng m√£ gi·ªõi thi·ªáu: *${refCode}*`;
                    } else {
                        referralMessage = `\n\nüîç M√£ gi·ªõi thi·ªáu *${refCode}* kh√¥ng h·ª£p l·ªá.`;
                    }
                }

                const message = `
‚≠êÔ∏è *Log in to MemePump for trading in seconds* ü§ò

üí∞ *Solana*: ${solBalance.toFixed(5)} SOL _(Please top up üëá)_
\`${wallets.solana}\`

üí∞ *Ethereum*: 0 ETH _(Please top up üëá)_
\`${wallets.ethereum}\`

üí∞ *BSC*: 0 BNB _(Please top up üëá)_
\`${wallets.bsc}\`${referralMessage}
                `;

                // Ki·ªÉm tra xem user c√≥ ph·∫£i l√† BG affiliate kh√¥ng
                let isBgAffiliate = false;
                try {
                    isBgAffiliate = await this.bgRefService.isWalletInBgAffiliateSystem(wallets.walletId);
                } catch (bgError) {
                    this.logger.error(`Error checking BG affiliate status: ${bgError.message}`);
                }

                // T·∫°o keyboard v·ªõi 1 ho·∫∑c 2 n√∫t t√πy theo tr·∫°ng th√°i BG affiliate
                const keyboardButtons = [
                    [{ text: 'üåê Login Website', url: wallets.websiteLink }]
                ];

                // Th√™m n√∫t BG Affiliate n·∫øu user l√† BG affiliate
                if (isBgAffiliate) {
                    const bgAffiliateUrl = wallets.websiteLink.replace(this.frontendUrl, `${this.frontendUrl.replace('https://', 'https://affiliate.')}`);
                    keyboardButtons.push([{ text: 'üéØ BG Affiliate', url: bgAffiliateUrl }]);
                }

                const keyboard = {
                    inline_keyboard: keyboardButtons,
                };

                await this.sendMessage(chatId, message, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard,
                });
                
            } catch (error) {
                this.logger.error(`Start command failed: ${error.message}`);
                await this.sendMessage(chatId, '‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
            }
        }
    }

    private async initializeLastUpdateId(): Promise<void> {
        try {
            const url = `${this.workerUrl}/bot${this.botToken}/getUpdates`;
            const response = await axios.get(url, {
                params: {
                    limit: 1,
                    offset: -1  // L·∫•y update m·ªõi nh·∫•t
                }
            });
            
            const updates = response.data.result || [];
            if (updates.length > 0) {
                this.lastUpdateId = updates[0].update_id;
                this.logger.log(`Initialized lastUpdateId to ${this.lastUpdateId}`);
            } else {
                this.lastUpdateId = 0;
                this.logger.log('No updates found, initialized lastUpdateId to 0');
            }
        } catch (error) {
            this.logger.error(`Error initializing lastUpdateId: ${error.message}`);
            this.lastUpdateId = 0;
        }
    }

    private async startPolling(): Promise<void> {
        if (this.isPolling) return;
        
        this.isPolling = true;
        this.logger.log('Starting polling...');

        const poll = async () => {
            if (!this.isPolling) return;

            try {
                const updates = await this.getUpdates();
                
                for (const update of updates) {
                    this.lastUpdateId = update.update_id;
                    await this.handleUpdate(update);
                }
            } catch (error) {
                this.logger.error(`Polling error: ${error.message}`);
            }

            // Schedule next poll
            setTimeout(poll, 1000);
        };

        // Start polling
        poll();
    }

    async onModuleInit() {
        // this.logger.log('üöÄ Telegram bot starting...');
        // await this.startPolling();
        // this.logger.log('üöÄ Telegram bot started');
    }

    /**
     * T·∫°o m√£ gi·ªõi thi·ªáu 6 k√Ω t·ª± ng·∫´u nhi√™n v√† ki·ªÉm tra tr√πng l·∫∑p
     * @returns M√£ gi·ªõi thi·ªáu duy nh·∫•t
     */
    private async generateUniqueReferralCode(): Promise<string> {
        const CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';
        const CODE_LENGTH = 6;
        
        // T·∫°o m√£ ng·∫´u nhi√™n 6 k√Ω t·ª±
        const generateCode = () => {
            let code = '';
            for (let i = 0; i < CODE_LENGTH; i++) {
                const randomIndex = Math.floor(Math.random() * CHARS.length);
                code += CHARS.charAt(randomIndex);
            }
            return code;
        };
        
        // Ki·ªÉm tra t√≠nh duy nh·∫•t c·ªßa m√£
        let isUnique = false;
        let newCode = '';
        
        // L·∫∑p cho ƒë·∫øn khi t√¨m ƒë∆∞·ª£c m√£ duy nh·∫•t
        while (!isUnique) {
            newCode = generateCode();
            
            // Ki·ªÉm tra xem m√£ ƒë√£ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu ch∆∞a
            const existingWallet = await this.listWalletRepository.findOne({
                where: { wallet_code_ref: newCode }
            });
            
            if (!existingWallet) {
                isUnique = true;
            }
        }
        
        this.logger.log(`Generated unique referral code: ${newCode}`);
        return newCode;
    }

    /**
     * T√¨m v√≠ d·ª±a v√†o m√£ gi·ªõi thi·ªáu
     * @param referralCode M√£ gi·ªõi thi·ªáu
     * @returns V√≠ t√¨m th·∫•y ho·∫∑c null
     */
    private async findWalletByReferralCode(referralCode: string): Promise<ListWallet | null> {
        // T√¨m v√≠ v·ªõi m√£ gi·ªõi thi·ªáu
        const wallet = await this.listWalletRepository.findOne({
            where: { wallet_code_ref: referralCode }
        });
        
        if (wallet) {
            this.logger.log(`Found wallet ${wallet.wallet_id} with referral code ${referralCode}`);
        } else {
            this.logger.warn(`No wallet found with referral code ${referralCode}`);
        }
        
        return wallet;
    }

    /**
     * T·∫°o quan h·ªá gi·ªõi thi·ªáu ƒëa c·∫•p ho·∫∑c th√™m v√†o BG affiliate
     * @param inviteeWalletId ID v√≠ c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c gi·ªõi thi·ªáu
     * @param referrerWalletId ID v√≠ c·ªßa ng∆∞·ªùi gi·ªõi thi·ªáu c·∫•p 1
     * @returns true n·∫øu t·∫°o th√†nh c√¥ng, false n·∫øu c√≥ l·ªói
     */
    private async createMultiLevelReferralRelationships(inviteeWalletId: number, referrerWalletId: number): Promise<boolean> {
        try {
            // Ki·ªÉm tra kh√¥ng cho ph√©p t·ª± gi·ªõi thi·ªáu ch√≠nh m√¨nh
            if (inviteeWalletId === referrerWalletId) {
                this.logger.warn(`Cannot create self-referral relationship for wallet ${inviteeWalletId}`);
                return false;
            }
            
            // Ki·ªÉm tra referrer c√≥ thu·ªôc BG affiliate kh√¥ng
            const isReferrerBgAffiliate = await this.bgRefService.isWalletInBgAffiliateSystem(referrerWalletId);
            
            if (isReferrerBgAffiliate) {
                // Th√™m v√†o BG affiliate tree
                try {
                    await this.bgRefService.addToBgAffiliateTree(referrerWalletId, inviteeWalletId);
                    this.logger.log(`Added wallet ${inviteeWalletId} to BG affiliate tree of referrer ${referrerWalletId}`);
                    return true;
                } catch (bgError) {
                    this.logger.error(`Error adding to BG affiliate tree: ${bgError.message}`);
                    // N·∫øu th√™m v√†o BG affiliate th·∫•t b·∫°i, fallback v·ªÅ multi-level
                    this.logger.log(`Falling back to multi-level referral for wallet ${inviteeWalletId}`);
                }
            }
            
            // T·∫°o m·∫£ng ƒë·ªÉ l∆∞u t·∫•t c·∫£ c√°c quan h·ªá gi·ªõi thi·ªáu c·∫ßn t·∫°o (multi-level truy·ªÅn th·ªëng)
            const MAX_LEVELS = 10;  // T·ªëi ƒëa 10 t·∫ßng (c·∫•p)
            type ReferralRelation = {
                wr_wallet_invitee: number;
                wr_wallet_referent: number;
                wr_wallet_level: number;
            };
            
            const referralRelationships: ReferralRelation[] = [];
            
            // Th√™m quan h·ªá gi·ªõi thi·ªáu c·∫•p 1 (tr·ª±c ti·∫øp)
            referralRelationships.push({
                wr_wallet_invitee: inviteeWalletId,
                wr_wallet_referent: referrerWalletId,
                wr_wallet_level: 1
            });
            
            // T√¨m t·∫•t c·∫£ ng∆∞·ªùi gi·ªõi thi·ªáu c·ªßa ng∆∞·ªùi gi·ªõi thi·ªáu (c·∫•p 2 ƒë·∫øn c·∫•p 9)
            const upperReferrers = await this.findUpperReferrers(referrerWalletId);
            this.logger.log(`Found ${upperReferrers.length} upper level referrers for wallet ${referrerWalletId}`);
            
            // Th√™m t·ª´ng quan h·ªá gi·ªõi thi·ªáu t·ª´ c·∫•p 2 tr·ªü l√™n (n·∫øu c√≥)
            for (let i = 0; i < upperReferrers.length && i < MAX_LEVELS - 1; i++) {
                const level = i + 2; // C·∫•p b·∫Øt ƒë·∫ßu t·ª´ 2
                referralRelationships.push({
                    wr_wallet_invitee: inviteeWalletId,
                    wr_wallet_referent: upperReferrers[i].referrer_id,
                    wr_wallet_level: level
                });
            }
            
            // L∆∞u t·∫•t c·∫£ c√°c quan h·ªá gi·ªõi thi·ªáu v√†o c∆° s·ªü d·ªØ li·ªáu
            for (const relation of referralRelationships) {
                const newReferral = this.walletReferentRepository.create(relation);
                await this.walletReferentRepository.save(newReferral);
                this.logger.log(`Created level ${relation.wr_wallet_level} referral: wallet ${relation.wr_wallet_referent} referred wallet ${relation.wr_wallet_invitee}`);
            }
            
            this.logger.log(`Created ${referralRelationships.length} multi-level referral relationships for wallet ${inviteeWalletId}`);
            return true;
        } catch (error) {
            this.logger.error(`Error creating referral relationships: ${error.message}`, error.stack);
            return false;
        }
    }
    
    /**
     * T√¨m t·∫•t c·∫£ ng∆∞·ªùi gi·ªõi thi·ªáu ·ªü c·∫•p cao h∆°n c·ªßa m·ªôt v√≠
     * @param walletId ID v√≠ c·∫ßn t√¨m ng∆∞·ªùi gi·ªõi thi·ªáu
     * @returns M·∫£ng c√°c ID v√≠ ng∆∞·ªùi gi·ªõi thi·ªáu, t·ª´ c·∫•p g·∫ßn nh·∫•t ƒë·∫øn xa nh·∫•t
     */
    private async findUpperReferrers(walletId: number): Promise<{referrer_id: number, level: number}[]> {
        try {
            // T√¨m t·∫•t c·∫£ ng∆∞·ªùi gi·ªõi thi·ªáu c·ªßa v√≠ n√†y
            const relationships = await this.walletReferentRepository.find({
                where: { wr_wallet_invitee: walletId },
                order: { wr_wallet_level: 'ASC' } // S·∫Øp x·∫øp theo c·∫•p, t·ª´ th·∫•p ƒë·∫øn cao
            });
            
            if (relationships.length === 0) {
                return [];
            }
            
            // Chuy·ªÉn ƒë·ªïi th√†nh m·∫£ng ID ng∆∞·ªùi gi·ªõi thi·ªáu v√† c·∫•p
            return relationships.map(rel => ({ 
                referrer_id: rel.wr_wallet_referent,
                level: rel.wr_wallet_level
            }));
            
        } catch (error) {
            this.logger.error(`Error finding upper referrers: ${error.message}`, error.stack);
            return [];
        }
    }

    async getOrCreateWallet(telegramId: string, refCode?: string): Promise<{ solana: string; ethereum: string; bsc: string; solanaPrivateKey: string; ethPrivateKey: string; code: string; websiteLink: string; refCode?: string; referralSuccess?: boolean; walletId: number }> {
        try {
            this.logger.log(`Creating or getting wallet for Telegram ID: ${telegramId}`);
            
            // Ki·ªÉm tra n·∫øu user ƒë√£ t·ªìn t·∫°i trong b·∫£ng user_wallets
            let userWallet = await this.userWalletRepository.findOne({ 
                where: { uw_telegram_id: telegramId },
                relations: ['wallet_auths', 'wallet_auths.wa_wallet']
            });

            let listWallet: ListWallet;
            let isNewUser = false;
            let referralSuccess = false;
            let referrerWallet: ListWallet | null = null;

            // N·∫øu user ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi user v√† wallet
            if (!userWallet) {
                isNewUser = true;
                this.logger.log(`Creating new user for Telegram ID: ${telegramId}`);

                // Ki·ªÉm tra m√£ gi·ªõi thi·ªáu n·∫øu c√≥ (ch·ªâ x·ª≠ l√Ω m√£ gi·ªõi thi·ªáu cho ng∆∞·ªùi d√πng m·ªõi)
                if (refCode) {
                    referrerWallet = await this.findWalletByReferralCode(refCode);
                }
                
                // T·∫°o Solana keypair ng·∫´u nhi√™n
                const solanaKeypair = Keypair.generate();
                const solanaPublicKey = solanaKeypair.publicKey.toBase58();
                const solanaPrivateKey = bs58.encode(solanaKeypair.secretKey);

                // T·∫°o Ethereum private key t·ª´ Solana private key
                const ethPrivateKey = this.deriveEthereumPrivateKey(solanaKeypair.secretKey);
                const ethWallet = new ethers.Wallet(ethPrivateKey);
                const ethAddress = ethWallet.address;

                // 1. T·∫°o user m·ªõi
                userWallet = this.userWalletRepository.create({
                    uw_telegram_id: telegramId
                });
                await this.userWalletRepository.save(userWallet);

                // T·∫°o m√£ gi·ªõi thi·ªáu ng·∫´u nhi√™n 6 k√Ω t·ª±
                const referralCode = await this.generateUniqueReferralCode();

                // 2. T·∫°o v√≠ m·ªõi
                listWallet = this.listWalletRepository.create({
                    wallet_private_key: JSON.stringify({
                        solana: solanaPrivateKey,
                        ethereum: ethPrivateKey
                    }),
                    wallet_solana_address: solanaPublicKey,
                    wallet_eth_address: ethAddress,
                    wallet_status: true,
                    wallet_auth: 'member',
                    wallet_code_ref: referralCode
                });
                
                // L∆∞u v√≠ v√†o c∆° s·ªü d·ªØ li·ªáu
                await this.listWalletRepository.save(listWallet);

                // 3. T·∫°o li√™n k·∫øt wallet_auth
                const walletAuth = this.walletAuthRepository.create({
                    wa_user_id: userWallet.uw_id,
                    wa_wallet_id: listWallet.wallet_id,
                    wa_type: 'main'
                });
                await this.walletAuthRepository.save(walletAuth);
                
                this.logger.log(`Created new wallet for user ${telegramId}: ${solanaPublicKey} with referral code: ${referralCode}`);

                // 4. T·∫°o quan h·ªá gi·ªõi thi·ªáu ƒëa c·∫•p n·∫øu c√≥ m√£ gi·ªõi thi·ªáu h·ª£p l·ªá
                if (referrerWallet) {
                    referralSuccess = await this.createMultiLevelReferralRelationships(listWallet.wallet_id, referrerWallet.wallet_id);
                }
            } else {
                this.logger.log(`Found existing user for Telegram ID: ${telegramId}`);
                // N·∫øu user ƒë√£ t·ªìn t·∫°i, l·∫•y v√≠ ch√≠nh (main wallet)
                if (userWallet.wallet_auths && userWallet.wallet_auths.length > 0) {
                    const mainWalletAuth = userWallet.wallet_auths.find(auth => auth.wa_type === 'main');
                    if (mainWalletAuth && mainWalletAuth.wa_wallet) {
                        listWallet = mainWalletAuth.wa_wallet;
                    } else {
                        // N·∫øu kh√¥ng t√¨m th·∫•y v√≠ ch√≠nh, s·ª≠ d·ª•ng v√≠ ƒë·∫ßu ti√™n
                        listWallet = userWallet.wallet_auths[0].wa_wallet;
                    }
                    
                    // ‚ú® C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ v√≠ t·ª´ private key
                    await this.updateWalletAddresses(listWallet);
                    
                    // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t wallet_code_ref n·∫øu ch∆∞a c√≥
                    if (!listWallet.wallet_code_ref) {
                        const referralCode = await this.generateUniqueReferralCode();
                        listWallet.wallet_code_ref = referralCode;
                        await this.listWalletRepository.save(listWallet);
                        this.logger.log(`Updated wallet ${listWallet.wallet_id} with new referral code: ${referralCode}`);
                    }
                    
                    // Kh√¥ng x·ª≠ l√Ω m√£ gi·ªõi thi·ªáu cho ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i
                    if (refCode) {
                        this.logger.log(`Ignoring referral code for existing user: ${telegramId}`);
                    }
                } else {
                    this.logger.log(`User ${telegramId} exists but has no wallet, creating new wallet`);
                    // Tr∆∞·ªùng h·ª£p c√≥ user nh∆∞ng kh√¥ng c√≥ v√≠ (hi·∫øm g·∫∑p)
                    // T·∫°o v√≠ m·ªõi v√† li√™n k·∫øt
                    const solanaKeypair = Keypair.generate();
                    const solanaPublicKey = solanaKeypair.publicKey.toBase58();
                    const solanaPrivateKey = bs58.encode(solanaKeypair.secretKey);
                    const ethPrivateKey = this.deriveEthereumPrivateKey(solanaKeypair.secretKey);
                    const ethWallet = new ethers.Wallet(ethPrivateKey);
                    
                    // T·∫°o m√£ gi·ªõi thi·ªáu ng·∫´u nhi√™n 6 k√Ω t·ª±
                    const referralCode = await this.generateUniqueReferralCode();
                    
                    listWallet = this.listWalletRepository.create({
                        wallet_private_key: JSON.stringify({
                            solana: solanaPrivateKey,
                            ethereum: ethPrivateKey
                        }),
                        wallet_solana_address: solanaPublicKey,
                        wallet_eth_address: ethWallet.address,
                        wallet_status: true,
                        wallet_auth: 'member',
                        wallet_code_ref: referralCode
                    });
                    
                    // L∆∞u v√≠ v√†o c∆° s·ªü d·ªØ li·ªáu
                    await this.listWalletRepository.save(listWallet);

                    const walletAuth = this.walletAuthRepository.create({
                        wa_user_id: userWallet.uw_id,
                        wa_wallet_id: listWallet.wallet_id,
                        wa_type: 'main'
                    });
                    await this.walletAuthRepository.save(walletAuth);
                    
                    this.logger.log(`Created new wallet for existing user ${telegramId} with referral code: ${referralCode}`);
                    
                    // Kh√¥ng x·ª≠ l√Ω m√£ gi·ªõi thi·ªáu cho ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i (Ngay c·∫£ khi h·ªç ƒëang t·∫°o v√≠ m·ªõi)
                    if (refCode) {
                        this.logger.log(`Ignoring referral code for existing user with new wallet: ${telegramId}`);
                    }
                }
            }

            // Parse private key t·ª´ v√≠
            const privateKeyObj = JSON.parse(listWallet.wallet_private_key);
            const solanaPrivateKey = privateKeyObj.solana;
            const ethPrivateKey = privateKeyObj.ethereum;

            // T·∫°o code m·ªõi v√† l∆∞u v√†o user_wallet_code
            const code = await this.generateNewCode(userWallet);
            this.logger.log(`Created wallet code for user ${telegramId}`);

            // T·∫°o link website v·ªõi telegram_id v√† code, th√™m tham s·ªë ref n·∫øu c√≥
            let websiteLink = `${this.frontendUrl}/tglogin?id=${telegramId}&code=${code}`;
            
            // ∆Øu ti√™n s·ª≠ d·ª•ng wallet_code_ref n·∫øu kh√¥ng c√≥ refCode ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
            const finalRefCode = refCode || listWallet.wallet_code_ref;
            
            if (finalRefCode) {
                websiteLink += `&ref=${finalRefCode}`;
                this.logger.log(`Added referral code ${finalRefCode} to website link`);
            }
            
            this.logger.log(`Generated login link for user ${telegramId}`);

            return {
                solana: listWallet.wallet_solana_address,
                ethereum: listWallet.wallet_eth_address,
                bsc: listWallet.wallet_eth_address, // BSC s·ª≠ d·ª•ng c√πng ƒë·ªãa ch·ªâ v·ªõi ETH
                solanaPrivateKey: solanaPrivateKey,
                ethPrivateKey: ethPrivateKey,
                code: code,
                websiteLink: websiteLink,
                refCode: finalRefCode,
                referralSuccess,
                walletId: listWallet.wallet_id
            };
        } catch (error) {
            this.logger.error(`Error in getOrCreateWallet: ${error.message}`, error.stack);
            throw error;
        }
    }

    /**
     * T·∫°o Ethereum private key t·ª´ Solana private key
     * @param solanaSecretKey Uint8Array Solana secret key
     * @returns Ethereum private key (hex string with 0x prefix)
     */
    private deriveEthereumPrivateKey(solanaSecretKey: Uint8Array): string {
        // L·∫•y 32 bytes ƒë·∫ßu ti√™n t·ª´ Solana secret key
        const ethPrivateKeyBytes = solanaSecretKey.slice(0, 32);

        // Chuy·ªÉn ƒë·ªïi sang hex string v√† th√™m prefix 0x
        const ethPrivateKey = '0x' + Buffer.from(ethPrivateKeyBytes).toString('hex');

        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa private key
        try {
            new ethers.Wallet(ethPrivateKey);
            return ethPrivateKey;
        } catch (error) {
            throw new Error('Invalid Ethereum private key generated');
        }
    }

    // Th√™m ph∆∞∆°ng th·ª©c ƒë·ªÉ c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ v√≠ t·ª´ private key
    private async updateWalletAddresses(wallet: ListWallet): Promise<ListWallet> {
        try {
            let updated = false;
            const privateKeyObject = JSON.parse(wallet.wallet_private_key);

            // C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ Solana
            if (privateKeyObject.solana) {
                try {
                    const solanaKeypair = Keypair.fromSecretKey(bs58.decode(privateKeyObject.solana));
                    const solanaAddress = solanaKeypair.publicKey.toBase58();
                    
                    if (wallet.wallet_solana_address !== solanaAddress) {
                        wallet.wallet_solana_address = solanaAddress;
                        updated = true;
                        this.logger.log(`Updated Solana address for wallet ${wallet.wallet_id} to ${solanaAddress}`);
                    }
                } catch (e) {
                    this.logger.error(`Error updating Solana address: ${e.message}`);
                }
            }

            // C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ Ethereum
            if (privateKeyObject.ethereum) {
                try {
                    const ethWallet = new ethers.Wallet(privateKeyObject.ethereum);
                    
                    if (wallet.wallet_eth_address !== ethWallet.address) {
                        wallet.wallet_eth_address = ethWallet.address;
                        updated = true;
                        this.logger.log(`Updated Ethereum address for wallet ${wallet.wallet_id} to ${ethWallet.address}`);
                    }
                } catch (e) {
                    this.logger.error(`Error updating Ethereum address: ${e.message}`);
                }
            }

            // L∆∞u n·∫øu c√≥ thay ƒë·ªïi
            if (updated) {
                await this.listWalletRepository.save(wallet);
            }

            return wallet;
        } catch (error) {
            this.logger.error('Error updating wallet addresses:', error);
            return wallet;
        }
    }

    async generateNewCode(userWallet: UserWallet): Promise<string> {
        // Generate a random hex string using crypto
        const code = randomBytes(16).toString('hex');
        
        // Create dates explicitly in UTC
        const now = new Date();
        // Convert current time to UTC and add 10 minutes
        const expirationTime = new Date(Date.UTC(
            now.getUTCFullYear(),
            now.getUTCMonth(),
            now.getUTCDate(),
            now.getUTCHours(),
            now.getUTCMinutes() + 10,
            now.getUTCSeconds()
        ));
        
        this.logger.debug('Generating new code:', {
            code,
            nowUTC: now.toISOString(),
            expirationTimeUTC: expirationTime.toISOString(),
            nowLocal: now.toString(),
            expirationTimeLocal: expirationTime.toString()
        });

        // Create new UserWalletCode entity
        const userWalletCode = this.userWalletCodeRepository.create({
            tw_wallet_id: userWallet.uw_id,
            tw_code_value: code,
            tw_code_time: expirationTime,
            tw_code_status: true,
            tw_code_type: 1
        });

        // Save to database using TypeORM
        await this.userWalletCodeRepository.save(userWalletCode);

        return code;
    }

    // Public method for external use
    async sendTelegramMessage(chatId: number, text: string): Promise<void> {
        try {
            await this.sendMessage(chatId, text);
        } catch (error) {
            this.logger.error(`Error sending Telegram message: ${error.message}`, error.stack);
            throw error;
        }
    }
}
